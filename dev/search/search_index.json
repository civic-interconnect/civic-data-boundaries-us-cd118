{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Civic Interconnect Project Documentation","text":"<p>Welcome to the documentation hub for Civic Interconnect (CI) projects.</p> <p>Use the navigation menu to explore available modules, APIs, and tools.</p> <p>For more information, visit the Civic Interconnect GitHub organization.</p>"},{"location":"api/civic_data_boundaries_us.build_index/","title":"Module <code>civic_data_boundaries_us.build_index</code>","text":""},{"location":"api/civic_data_boundaries_us.build_index/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.build_index/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.build_index/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.build_index/#get_bboxgdf-geopandasgeodataframegeodataframe-listfloat-none","title":"<code>get_bbox(gdf: geopandas.geodataframe.GeoDataFrame) -&gt; list[float] | None</code>","text":"<p>Return bbox as [minx, miny, maxx, maxy] or None.</p>"},{"location":"api/civic_data_boundaries_us.build_index/#get_index_path-pathlibpath","title":"<code>get_index_path() -&gt; pathlib.Path</code>","text":"<p>Return the default path to the boundaries index CSV file.</p>"},{"location":"api/civic_data_boundaries_us.build_index/#get_repo_rootlevels_up-int-3-pathlibpath","title":"<code>get_repo_root(levels_up: int = 3) -&gt; pathlib.Path</code>","text":"<p>Return the root directory of this repo by walking up a fixed number of parent folders.</p> <p>Defaults to 3 levels up, assuming this file is under <code>src/civic_data_boundaries_us/utils/</code>.</p>"},{"location":"api/civic_data_boundaries_us.build_index/#get_states_dir-pathlibpath","title":"<code>get_states_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory containing state boundary data.</p>"},{"location":"api/civic_data_boundaries_us.build_index/#main-pandascoreframedataframe","title":"<code>main() -&gt; pandas.core.frame.DataFrame</code>","text":"<p>Scan state folders and build a boundaries index CSV.</p>"},{"location":"api/civic_data_boundaries_us.build_index/#process_state_dirstate_dir-pathlibpath-dict","title":"<code>process_state_dir(state_dir: pathlib.Path) -&gt; dict</code>","text":"<p>Process a single state directory and return a summary row.</p>"},{"location":"api/civic_data_boundaries_us.build_index/#read_yamlpath-str-pathlibpath-dictstr-typingany","title":"<code>read_yaml(path: str | pathlib.Path) -&gt; dict[str, typing.Any]</code>","text":"<p>Read and parse a YAML file into a dictionary.</p> <p>Args:     path (str | Path): YAML file path.</p> <p>Returns:     dict: Parsed YAML data.</p>"},{"location":"api/civic_data_boundaries_us.cd118_config/","title":"Module <code>civic_data_boundaries_us.cd118_config</code>","text":""},{"location":"api/civic_data_boundaries_us.cd118_config/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.cd118_config/#cd118configself-tiger_base_url-str-data_dir-pathlibpath-none","title":"<code>CD118Config(self, tiger_base_url: str, data_dir: pathlib.Path) -&gt; None</code>","text":"<p>CD118Config(tiger_base_url: str, data_dir: pathlib.Path)</p>"},{"location":"api/civic_data_boundaries_us.cd118_config/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.cd118_config/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.cd118_config/#dataclassclsnone-inittrue-reprtrue-eqtrue-orderfalse-unsafe_hashfalse-frozenfalse-match_argstrue-kw_onlyfalse-slotsfalse-weakref_slotfalse","title":"<code>dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)</code>","text":"<p>Add dunder methods based on the fields defined in the class.</p> <p>Examines PEP 526 annotations to determine fields.</p> <p>If init is true, an init() method is added to the class. If repr is true, a repr() method is added. If order is true, rich comparison dunder methods are added. If unsafe_hash is true, a hash() method is added. If frozen is true, fields may not be assigned to after instance creation. If match_args is true, the match_args tuple is added. If kw_only is true, then by default all fields are keyword-only. If slots is true, a new class with a slots attribute is returned.</p>"},{"location":"api/civic_data_boundaries_us.cleanup/","title":"Module <code>civic_data_boundaries_us.cleanup</code>","text":""},{"location":"api/civic_data_boundaries_us.cleanup/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.cleanup/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.cleanup/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.cleanup/#clean_data_in_dirdata_in_dir-pathlibpath","title":"<code>clean_data_in_dir(data_in_dir: pathlib.Path)</code>","text":"<p>Delete all .zip files and extracted shapefiles from data-in/. Keeps chunked GeoJSONs safe in data-out.</p>"},{"location":"api/civic_data_boundaries_us.cleanup/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us.cli.build/","title":"Module <code>civic_data_boundaries_us.cli.build</code>","text":""},{"location":"api/civic_data_boundaries_us.cli.build/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.cli.build/#build_api","title":"<code>build_api()</code>","text":"<p>Generate API reference documentation.</p> <p>Uses the internal script <code>_ci_build_api.py</code> to scan codebase and regenerate <code>REF_API.md</code> with up-to-date function and class signatures.</p>"},{"location":"api/civic_data_boundaries_us.cli.build/#build_docs","title":"<code>build_docs()</code>","text":"<p>Build general project documentation.</p> <p>Placeholder for future implementation (e.g., using MkDocs or Sphinx).</p>"},{"location":"api/civic_data_boundaries_us.cli.cli/","title":"Module <code>civic_data_boundaries_us.cli.cli</code>","text":""},{"location":"api/civic_data_boundaries_us.cli.cli/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.cli.cli/#cleanup_command","title":"<code>cleanup_command()</code>","text":"<p>Cleanup temporary files and directories created during export. Deletes all .zip files and extracted shapefiles from data-in/.</p>"},{"location":"api/civic_data_boundaries_us.cli.cli/#export_command","title":"<code>export_command()</code>","text":"<p>Export and chunk all data from TIGER into app-ready GeoJSON in data-out/. Includes state, county, and CD118 layers.</p>"},{"location":"api/civic_data_boundaries_us.cli.cli/#fetch_command","title":"<code>fetch_command()</code>","text":"<p>Download required TIGER shapefiles (state, county, CD118) into data-in/. Skips download if files already exist.</p>"},{"location":"api/civic_data_boundaries_us.cli.cli/#index_command","title":"<code>index_command()</code>","text":"<p>Generate index.json and other summary metadata files in data-out/.</p>"},{"location":"api/civic_data_boundaries_us.cli.cli/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us.cli.dev/","title":"Module <code>civic_data_boundaries_us.cli.dev</code>","text":""},{"location":"api/civic_data_boundaries_us.cli.dev/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.cli.dev/#run_hooks","title":"<code>run_hooks()</code>","text":"<p>Run all pre-commit hooks twice (to fix and verify).</p>"},{"location":"api/civic_data_boundaries_us.cli.dev/#run_linter","title":"<code>run_linter()</code>","text":"<p>Run Ruff linter and formatter on the codebase.</p>"},{"location":"api/civic_data_boundaries_us.cli.dev/#run_tests","title":"<code>run_tests()</code>","text":"<p>Run all unit and integration tests.</p>"},{"location":"api/civic_data_boundaries_us.cli.release/","title":"Module <code>civic_data_boundaries_us.cli.release</code>","text":""},{"location":"api/civic_data_boundaries_us.cli.release/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.cli.release/#bump_versionold-str-new-str","title":"<code>bump_version(old: str, new: str)</code>","text":"<p>Bump version number in pyproject.toml.</p> <p>Args:     old: Old version string (e.g., 0.1.0)     new: New version string (e.g., 0.2.0)</p>"},{"location":"api/civic_data_boundaries_us.cli.release/#tag_releaseversion-str","title":"<code>tag_release(version: str)</code>","text":"<p>Create and push a Git release tag.</p> <p>Args:     version: Version string to tag (e.g., 0.2.0)</p>"},{"location":"api/civic_data_boundaries_us.config.tiger_layers_config/","title":"Module <code>civic_data_boundaries_us.config.tiger_layers_config</code>","text":""},{"location":"api/civic_data_boundaries_us.export/","title":"Module <code>civic_data_boundaries_us.export</code>","text":""},{"location":"api/civic_data_boundaries_us.export/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.export/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.export/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.export/#apply_to_geojson_folderfolder-pathlibpath-action_fn-collectionsabccallable-suffix-str-_processedgeojson-tolerance-float-none-none-max_features-int-none-none","title":"<code>apply_to_geojson_folder(folder: pathlib.Path, action_fn: collections.abc.Callable, *, suffix: str = '_processed.geojson', tolerance: float | None = None, max_features: int | None = None)</code>","text":"<p>Apply an action to every .geojson file in a folder.</p> <p>Args:     folder (Path): Path to folder containing .geojson files.     action_fn (Callable): Function to apply to each file.     suffix (str): Suffix to add to output filenames.     tolerance (float | None): Optional tolerance value for simplification.     max_features (int | None): Optional limit for chunking.</p>"},{"location":"api/civic_data_boundaries_us.export/#chunk_layers","title":"<code>chunk_layers()</code>","text":"<p>Chunk all exported geojsons in data-out/, based on YAML configs. Handles both split-by-state folders and single nationwide layers.</p>"},{"location":"api/civic_data_boundaries_us.export/#chunk_onepath-pathlibpath-max_features-int-output_dir-pathlibpath","title":"<code>chunk_one(path: pathlib.Path, max_features: int, output_dir: pathlib.Path)</code>","text":"<p>Chunk a single GeoJSON file and write the output files.</p> <p>Args:     path (Path): Path to input GeoJSON file.     max_features (int): Max features per chunk.     output_dir (Path): Output folder to store chunks.</p>"},{"location":"api/civic_data_boundaries_us.export/#export_cd118","title":"<code>export_cd118()</code>","text":"<p>Export CD118 boundaries from local TIGER data to GeoJSON in data-out/national. Produces one GeoJSON file per state.</p>"},{"location":"api/civic_data_boundaries_us.export/#export_state_filesstate_code-str","title":"<code>export_state_files(state_code: str)</code>","text":"<p>Export GeoJSON files for a single U.S. state from TIGER data.</p>"},{"location":"api/civic_data_boundaries_us.export/#get_chunking_params-dict","title":"<code>get_chunking_params() -&gt; dict</code>","text":"<p>Load chunking and simplification params from all layer configs.</p> <p>Returns:     dict: Dictionary with defaults for chunking and simplification.</p>"},{"location":"api/civic_data_boundaries_us.export/#get_data_out_dir-pathlibpath","title":"<code>get_data_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-out directory for processed GeoJSON and chunked outputs.</p>"},{"location":"api/civic_data_boundaries_us.export/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>Export and chunk TIGER data for all layers: - State + county GeoJSONs per state - CD118 - Chunking output geojsons</p> <p>Returns:     int: 0 on success, 1 on error</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/","title":"Module <code>civic_data_boundaries_us.export_cd118</code>","text":""},{"location":"api/civic_data_boundaries_us.export_cd118/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.export_cd118/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.export_cd118/#export_cd118","title":"<code>export_cd118()</code>","text":"<p>Export CD118 boundaries from local TIGER data to GeoJSON in data-out/national. Produces one GeoJSON file per state.</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#get_cd118_in_dir-pathlibpath","title":"<code>get_cd118_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the folder under data-in/ where raw CD118 shapefiles are extracted.</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#get_national_out_dir-pathlibpath","title":"<code>get_national_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/ where national-level files are written. Includes layers like national states, counties, or CD118 merged geojsons.</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#get_state_dir_namestate_abbr-str-str","title":"<code>get_state_dir_name(state_abbr: str) -&gt; str</code>","text":"<p>Return the standardized directory name for a state (full lowercase name with underscores).</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#load_cd118_layershp_path-pathlibpath-geopandasgeodataframegeodataframe","title":"<code>load_cd118_layer(shp_path: pathlib.Path) -&gt; geopandas.geodataframe.GeoDataFrame</code>","text":"<p>Load a single CD118 shapefile.</p> <p>Args:     shp_path (Path): Path to shapefile.</p> <p>Returns:     GeoDataFrame</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>Run CD118 export.</p> <p>Returns:     int: 0 if successful, 1 on error.</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#read_yamlpath-str-pathlibpath-dictstr-typingany","title":"<code>read_yaml(path: str | pathlib.Path) -&gt; dict[str, typing.Any]</code>","text":"<p>Read and parse a YAML file into a dictionary.</p> <p>Args:     path (str | Path): YAML file path.</p> <p>Returns:     dict: Parsed YAML data.</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#today_utc_str-str","title":"<code>today_utc_str() -&gt; str</code>","text":"<p>Return today's date in UTC in 'YYYY-MM-DD' format.</p> <p>Returns:     str: Current UTC date as a string.</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#validate_columnsgdf-geopandasgeodataframegeodataframe-columns-liststr-label-str","title":"<code>validate_columns(gdf: geopandas.geodataframe.GeoDataFrame, columns: list[str], label: str)</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us.export_cd118/#write_yamldata-dictstr-typingany-path-str-pathlibpath-pathlibpath","title":"<code>write_yaml(data: dict[str, typing.Any], path: str | pathlib.Path) -&gt; pathlib.Path</code>","text":"<p>Write a dictionary to a YAML file.</p> <p>Args:     data (dict): Data to write.     path (str | Path): File path to write to.</p> <p>Returns:     Path: The path the file was written to.</p>"},{"location":"api/civic_data_boundaries_us.export_state/","title":"Module <code>civic_data_boundaries_us.export_state</code>","text":""},{"location":"api/civic_data_boundaries_us.export_state/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.export_state/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.export_state/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.export_state/#export_state_filesstate_code-str","title":"<code>export_state_files(state_code: str)</code>","text":"<p>Export GeoJSON files for a single U.S. state from TIGER data.</p>"},{"location":"api/civic_data_boundaries_us.export_state/#get_state_dir_namestate_abbr-str-str","title":"<code>get_state_dir_name(state_abbr: str) -&gt; str</code>","text":"<p>Return the standardized directory name for a state (full lowercase name with underscores).</p>"},{"location":"api/civic_data_boundaries_us.export_state/#get_states_out_dir-pathlibpath","title":"<code>get_states_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/ where per-state folders are written.</p>"},{"location":"api/civic_data_boundaries_us.export_state/#get_tiger_in_dir-pathlibpath","title":"<code>get_tiger_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the folder under data-in/ where TIGER shapefiles are stored after download and extraction.</p>"},{"location":"api/civic_data_boundaries_us.export_state/#load_layersource-pathlibpath-required_cols-liststr-fips-str-none-none-geopandasgeodataframegeodataframe","title":"<code>load_layer(source: pathlib.Path, required_cols: list[str], fips: str | None = None) -&gt; geopandas.geodataframe.GeoDataFrame</code>","text":"<p>Load a TIGER shapefile layer and optionally filter it by state FIPS.</p>"},{"location":"api/civic_data_boundaries_us.export_state/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us.export_state/#read_yamlpath-str-pathlibpath-dictstr-typingany","title":"<code>read_yaml(path: str | pathlib.Path) -&gt; dict[str, typing.Any]</code>","text":"<p>Read and parse a YAML file into a dictionary.</p> <p>Args:     path (str | Path): YAML file path.</p> <p>Returns:     dict: Parsed YAML data.</p>"},{"location":"api/civic_data_boundaries_us.export_state/#today_utc_str-str","title":"<code>today_utc_str() -&gt; str</code>","text":"<p>Return today's date in UTC in 'YYYY-MM-DD' format.</p> <p>Returns:     str: Current UTC date as a string.</p>"},{"location":"api/civic_data_boundaries_us.export_state/#validate_columnsgdf-geopandasgeodataframegeodataframe-columns-liststr-label-str","title":"<code>validate_columns(gdf: geopandas.geodataframe.GeoDataFrame, columns: list[str], label: str)</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us.export_state/#write_yamldata-dictstr-typingany-path-str-pathlibpath-pathlibpath","title":"<code>write_yaml(data: dict[str, typing.Any], path: str | pathlib.Path) -&gt; pathlib.Path</code>","text":"<p>Write a dictionary to a YAML file.</p> <p>Args:     data (dict): Data to write.     path (str | Path): File path to write to.</p> <p>Returns:     Path: The path the file was written to.</p>"},{"location":"api/civic_data_boundaries_us.fetch/","title":"Module <code>civic_data_boundaries_us.fetch</code>","text":""},{"location":"api/civic_data_boundaries_us.fetch/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.fetch/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.fetch/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.fetch/#download_fileurl-str-dest_path-pathlibpath","title":"<code>download_file(url: str, dest_path: pathlib.Path)</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us.fetch/#extract_zipzip_path-pathlibpath-extract_to-pathlibpath","title":"<code>extract_zip(zip_path: pathlib.Path, extract_to: pathlib.Path)</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us.fetch/#get_data_in_dir-pathlibpath","title":"<code>get_data_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in directory for raw input data (downloads, archives).</p>"},{"location":"api/civic_data_boundaries_us.fetch/#get_repo_rootlevels_up-int-3-pathlibpath","title":"<code>get_repo_root(levels_up: int = 3) -&gt; pathlib.Path</code>","text":"<p>Return the root directory of this repo by walking up a fixed number of parent folders.</p> <p>Defaults to 3 levels up, assuming this file is under:     src/civic_data_boundaries_us/utils/</p>"},{"location":"api/civic_data_boundaries_us.fetch/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us.fetch/#process_layerlayer-dict","title":"<code>process_layer(layer: dict)</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us.get_paths/","title":"Module <code>civic_data_boundaries_us.get_paths</code>","text":""},{"location":"api/civic_data_boundaries_us.get_paths/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.get_paths/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.get_paths/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.get_paths/#get_cd118_dir-pathlibpath","title":"<code>get_cd118_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory for congressional district 118 data. This is where the 118th Congressional District data is stored.</p>"},{"location":"api/civic_data_boundaries_us.get_paths/#get_congress_dir-pathlibpath","title":"<code>get_congress_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory for congressional district data. This is specifically for congressional districts (CD118).</p>"},{"location":"api/civic_data_boundaries_us.get_paths/#get_data_dir-pathlibpath","title":"<code>get_data_dir() -&gt; pathlib.Path</code>","text":"<p>Return the main data directory for this package. This is where all boundary data is stored.</p>"},{"location":"api/civic_data_boundaries_us.get_paths/#get_national_dir-pathlibpath","title":"<code>get_national_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory for national boundary data. This includes congressional districts and other national boundaries.</p>"},{"location":"api/civic_data_boundaries_us.get_paths/#get_repo_rootlevels_up-int-3-pathlibpath","title":"<code>get_repo_root(levels_up: int = 3) -&gt; pathlib.Path</code>","text":"<p>Return the root directory of this repo by walking up a fixed number of parent folders.</p> <p>Defaults to 3 levels up, assuming this file is under <code>src/civic_data_boundaries_us/utils/</code>.</p>"},{"location":"api/civic_data_boundaries_us.get_paths/#get_states_dir-pathlibpath","title":"<code>get_states_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory containing state boundary data.</p>"},{"location":"api/civic_data_boundaries_us.index/","title":"Module <code>civic_data_boundaries_us.index</code>","text":""},{"location":"api/civic_data_boundaries_us.index/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.index/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.index/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.index/#build_index_main-int","title":"<code>build_index_main() -&gt; int</code>","text":"<p>Build an index.json summarizing exported GeoJSONs.</p>"},{"location":"api/civic_data_boundaries_us.index/#compute_bboxgeojson_path-pathlibpath-listfloat-none","title":"<code>compute_bbox(geojson_path: pathlib.Path) -&gt; list[float] | None</code>","text":"<p>Compute bounding box [minx, miny, maxx, maxy] for a GeoJSON file.</p> <p>Returns:     list[float] | None: Bounding box or None if read fails.</p>"},{"location":"api/civic_data_boundaries_us.index/#get_data_out_dir-pathlibpath","title":"<code>get_data_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-out directory for processed GeoJSON and chunked outputs.</p>"},{"location":"api/civic_data_boundaries_us.index/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>CLI entry point for index.</p>"},{"location":"api/civic_data_boundaries_us.utils.get_paths/","title":"Module <code>civic_data_boundaries_us.utils.get_paths</code>","text":""},{"location":"api/civic_data_boundaries_us.utils.get_paths/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.utils.get_paths/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.utils.get_paths/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.utils.get_paths/#get_cd118_in_dir-pathlibpath","title":"<code>get_cd118_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the folder under data-in/ where raw CD118 shapefiles are extracted.</p>"},{"location":"api/civic_data_boundaries_us.utils.get_paths/#get_cd118_out_dir-pathlibpath","title":"<code>get_cd118_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/national/ where CD118 geojsons are stored.</p>"},{"location":"api/civic_data_boundaries_us.utils.get_paths/#get_data_in_dir-pathlibpath","title":"<code>get_data_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in directory for raw input data (downloads, archives).</p>"},{"location":"api/civic_data_boundaries_us.utils.get_paths/#get_data_out_dir-pathlibpath","title":"<code>get_data_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-out directory for processed GeoJSON and chunked outputs.</p>"},{"location":"api/civic_data_boundaries_us.utils.get_paths/#get_national_out_dir-pathlibpath","title":"<code>get_national_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/ where national-level files are written. Includes layers like national states, counties, or CD118 merged geojsons.</p>"},{"location":"api/civic_data_boundaries_us.utils.get_paths/#get_repo_rootlevels_up-int-3-pathlibpath","title":"<code>get_repo_root(levels_up: int = 3) -&gt; pathlib.Path</code>","text":"<p>Return the root directory of this repo by walking up a fixed number of parent folders.</p> <p>Defaults to 3 levels up, assuming this file is under:     src/civic_data_boundaries_us/utils/</p>"},{"location":"api/civic_data_boundaries_us.utils.get_paths/#get_states_out_dir-pathlibpath","title":"<code>get_states_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/ where per-state folders are written.</p>"},{"location":"api/civic_data_boundaries_us.utils.get_paths/#get_tiger_in_dir-pathlibpath","title":"<code>get_tiger_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the folder under data-in/ where TIGER shapefiles are stored after download and extraction.</p>"},{"location":"api/civic_data_boundaries_us.utils.tiger_config/","title":"Module <code>civic_data_boundaries_us.utils.tiger_config</code>","text":""},{"location":"api/civic_data_boundaries_us.utils.tiger_config/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us.utils.tiger_config/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us.utils.tiger_config/#tigerconfigself-base_url-str-state_layer_url-str-county_layer_url-str-local_state_dir-pathlibpath-local_county_dir-pathlibpath-none","title":"<code>TigerConfig(self, base_url: str, state_layer_url: str, county_layer_url: str, local_state_dir: pathlib.Path, local_county_dir: pathlib.Path) -&gt; None</code>","text":"<p>TigerConfig(base_url: str, state_layer_url: str, county_layer_url: str, local_state_dir: pathlib.Path, local_county_dir: pathlib.Path)</p>"},{"location":"api/civic_data_boundaries_us.utils.tiger_config/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.utils.tiger_config/#dataclassclsnone-inittrue-reprtrue-eqtrue-orderfalse-unsafe_hashfalse-frozenfalse-match_argstrue-kw_onlyfalse-slotsfalse-weakref_slotfalse","title":"<code>dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)</code>","text":"<p>Add dunder methods based on the fields defined in the class.</p> <p>Examines PEP 526 annotations to determine fields.</p> <p>If init is true, an init() method is added to the class. If repr is true, a repr() method is added. If order is true, rich comparison dunder methods are added. If unsafe_hash is true, a hash() method is added. If frozen is true, fields may not be assigned to after instance creation. If match_args is true, the match_args tuple is added. If kw_only is true, then by default all fields are keyword-only. If slots is true, a new class with a slots attribute is returned.</p>"},{"location":"api/civic_data_boundaries_us.utils.tiger_config/#get_repo_rootlevels_up-int-3-pathlibpath","title":"<code>get_repo_root(levels_up: int = 3) -&gt; pathlib.Path</code>","text":"<p>Return the root directory of this repo by walking up a fixed number of parent folders.</p> <p>Defaults to 3 levels up, assuming this file is under <code>src/civic_data_boundaries_us/utils/</code>.</p>"},{"location":"api/civic_data_boundaries_us.utils.tiger_utils/","title":"Module <code>civic_data_boundaries_us.utils.tiger_utils</code>","text":""},{"location":"api/civic_data_boundaries_us.utils.tiger_utils/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us.utils.tiger_utils/#get_repo_rootlevels_up-int-3-pathlibpath","title":"<code>get_repo_root(levels_up: int = 3) -&gt; pathlib.Path</code>","text":"<p>Return the root directory of this repo by walking up a fixed number of parent folders.</p> <p>Defaults to 3 levels up, assuming this file is under <code>src/civic_data_boundaries_us/utils/</code>.</p>"},{"location":"api/civic_data_boundaries_us.utils.tiger_utils/#get_tiger_base_url-str","title":"<code>get_tiger_base_url() -&gt; str</code>","text":"<p>Return the base URL for the TIGER/Line shapefiles for 2022. This is the URL where the TIGER/Line shapefiles can be downloaded.</p>"},{"location":"api/civic_data_boundaries_us.utils.tiger_utils/#get_tiger_data_dirs-dict","title":"<code>get_tiger_data_dirs() -&gt; dict</code>","text":"<p>Return a dictionary of local paths for the TIGER/Line shapefiles for states and counties. These paths point to where the shapefiles are stored in the local repository.</p>"},{"location":"api/civic_data_boundaries_us.utils.tiger_utils/#get_tiger_layer_urls-dict","title":"<code>get_tiger_layer_urls() -&gt; dict</code>","text":"<p>Return a dictionary of URLs for the TIGER/Line shapefiles for states and counties. The URLs point to the ZIP files containing the shapefiles.</p>"},{"location":"api/civic_data_boundaries_us_cd118.cleanup/","title":"Module <code>civic_data_boundaries_us_cd118.cleanup</code>","text":""},{"location":"api/civic_data_boundaries_us_cd118.cleanup/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us_cd118.cleanup/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us_cd118.cleanup/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us_cd118.cleanup/#clean_data_in_dirdata_in_dir-pathlibpath","title":"<code>clean_data_in_dir(data_in_dir: pathlib.Path)</code>","text":"<p>Delete all .zip files and entire shapefile sets from data-in/, including loose shapefiles and extracted folders.</p> <p>Keeps chunked GeoJSONs safe in data-out.</p>"},{"location":"api/civic_data_boundaries_us_cd118.cleanup/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us_cd118.cli.cli/","title":"Module <code>civic_data_boundaries_us_cd118.cli.cli</code>","text":""},{"location":"api/civic_data_boundaries_us_cd118.cli.cli/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us_cd118.cli.cli/#cleanup_command","title":"<code>cleanup_command()</code>","text":"<p>Cleanup temporary files and directories created during export. Deletes all .zip files and extracted shapefiles from data-in/.</p>"},{"location":"api/civic_data_boundaries_us_cd118.cli.cli/#export_command","title":"<code>export_command()</code>","text":"<p>Export and chunk all data from TIGER into app-ready GeoJSON in data-out/. Includes CD118 layers.</p>"},{"location":"api/civic_data_boundaries_us_cd118.cli.cli/#fetch_command","title":"<code>fetch_command()</code>","text":"<p>Download required TIGER shapefiles (CD118) into data-in/. Skips download if files already exist.</p>"},{"location":"api/civic_data_boundaries_us_cd118.cli.cli/#index_command","title":"<code>index_command()</code>","text":"<p>Generate index.json and other summary metadata files in data-out/.</p>"},{"location":"api/civic_data_boundaries_us_cd118.cli.cli/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export/","title":"Module <code>civic_data_boundaries_us_cd118.export</code>","text":""},{"location":"api/civic_data_boundaries_us_cd118.export/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us_cd118.export/#apply_to_geojson_folderfolder-pathlibpath-action_fn-collectionsabccallable-suffix-str-_processedgeojson-tolerance-float-none-none-max_features-int-none-none","title":"<code>apply_to_geojson_folder(folder: pathlib.Path, action_fn: collections.abc.Callable, *, suffix: str = '_processed.geojson', tolerance: float | None = None, max_features: int | None = None)</code>","text":"<p>Apply an action to every .geojson file in a folder.</p> <p>Args:     folder (Path): Path to folder containing .geojson files.     action_fn (Callable): Function to apply to each file.     suffix (str): Suffix to add to output filenames.     tolerance (float | None): Optional tolerance value for simplification.     max_features (int | None): Optional limit for chunking.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export/#chunk_layers","title":"<code>chunk_layers()</code>","text":"<p>Chunk all exported geojsons in data-out/, based on YAML configs. Handles both split-by-state folders and single nationwide layers.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export/#chunk_onepath-pathlibpath-max_features-int-output_dir-pathlibpath","title":"<code>chunk_one(path: pathlib.Path, max_features: int, output_dir: pathlib.Path)</code>","text":"<p>Chunk a single GeoJSON file and write the output files.</p> <p>Args:     path (Path): Path to input GeoJSON file.     max_features (int): Max features per chunk.     output_dir (Path): Output folder to store chunks.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export/#export_cd118","title":"<code>export_cd118()</code>","text":"<p>Export CD118 boundaries:   - a nationwide GeoJSON   - one GeoJSON per state</p>"},{"location":"api/civic_data_boundaries_us_cd118.export/#get_data_out_dir-pathlibpath","title":"<code>get_data_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-out directory for processed GeoJSON and chunked outputs.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export/#load_layer_configlayer_name-str-dict","title":"<code>load_layer_config(layer_name: str) -&gt; dict</code>","text":"<p>Load configuration for a given layer, merged with global defaults.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>Export and chunk TIGER data for layers: - CD118 - Chunking output geojsons</p> <p>Returns:     int: 0 on success, 1 on error</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/","title":"Module <code>civic_data_boundaries_us_cd118.export_cd118</code>","text":""},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#export_cd118","title":"<code>export_cd118()</code>","text":"<p>Export CD118 boundaries:   - a nationwide GeoJSON   - one GeoJSON per state</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#get_national_out_dir-pathlibpath","title":"<code>get_national_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/ where national-level files are written. Includes layers like national states, counties, or CD118 merged geojsons.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#get_state_dir_namestate_abbr-str-str","title":"<code>get_state_dir_name(state_abbr: str) -&gt; str</code>","text":"<p>Return the standardized directory name for a state (full lowercase name with underscores).</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#get_states_out_dir-pathlibpath","title":"<code>get_states_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/ where per-state folders are written.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#get_tiger_in_dir-pathlibpath","title":"<code>get_tiger_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the folder under data-in/ where TIGER shapefiles are stored after download and extraction.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#load_cd118_layershp_path-pathlibpath-geopandasgeodataframegeodataframe","title":"<code>load_cd118_layer(shp_path: pathlib.Path) -&gt; geopandas.geodataframe.GeoDataFrame</code>","text":"<p>Load a single CD118 shapefile.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#load_layer_configlayer_name-str-dict","title":"<code>load_layer_config(layer_name: str) -&gt; dict</code>","text":"<p>Load configuration for a given layer, merged with global defaults.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>Run CD118 export.</p> <p>Returns:     int: 0 if successful, 1 on error.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#read_yamlpath-str-pathlibpath-dictstr-typingany","title":"<code>read_yaml(path: str | pathlib.Path) -&gt; dict[str, typing.Any]</code>","text":"<p>Read and parse a YAML file into a dictionary.</p> <p>Args:     path (str | Path): YAML file path.</p> <p>Returns:     dict: Parsed YAML data.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#today_utc_str-str","title":"<code>today_utc_str() -&gt; str</code>","text":"<p>Return today's date in UTC in 'YYYY-MM-DD' format.</p> <p>Returns:     str: Current UTC date as a string.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#validate_columnsgdf-geopandasgeodataframegeodataframe-columns-liststr-label-str","title":"<code>validate_columns(gdf: geopandas.geodataframe.GeoDataFrame, columns: list[str], label: str)</code>","text":"<p>No description available.</p>"},{"location":"api/civic_data_boundaries_us_cd118.export_cd118/#write_yamldata-dictstr-typingany-path-str-pathlibpath-pathlibpath","title":"<code>write_yaml(data: dict[str, typing.Any], path: str | pathlib.Path) -&gt; pathlib.Path</code>","text":"<p>Write a dictionary to a YAML file.</p> <p>Args:     data (dict): Data to write.     path (str | Path): File path to write to.</p> <p>Returns:     Path: The path the file was written to.</p>"},{"location":"api/civic_data_boundaries_us_cd118.fetch/","title":"Module <code>civic_data_boundaries_us_cd118.fetch</code>","text":""},{"location":"api/civic_data_boundaries_us_cd118.fetch/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us_cd118.fetch/#fetcherrorself-args-kwargs","title":"<code>FetchError(self, /, *args, **kwargs)</code>","text":"<p>Custom exception for TIGER fetch errors.</p>"},{"location":"api/civic_data_boundaries_us_cd118.fetch/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us_cd118.fetch/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us_cd118.fetch/#download_fileurl-str-dest_path-pathlibpath-pathlibpath","title":"<code>download_file(url: str, dest_path: pathlib.Path) -&gt; pathlib.Path</code>","text":"<p>Download a file from a URL to a destination path.</p> <p>Returns:     Path to the downloaded file.</p> <p>Raises:     FetchError if the download fails.</p>"},{"location":"api/civic_data_boundaries_us_cd118.fetch/#extract_zipzip_path-pathlibpath-extract_to-pathlibpath-none","title":"<code>extract_zip(zip_path: pathlib.Path, extract_to: pathlib.Path) -&gt; None</code>","text":"<p>Extracts a ZIP file into a target folder.</p> <p>Raises:     FileNotFoundError if zip file is missing.     FetchError if extraction fails.</p>"},{"location":"api/civic_data_boundaries_us_cd118.fetch/#get_data_in_dir-pathlibpath","title":"<code>get_data_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in directory for raw input data (downloads, archives).</p>"},{"location":"api/civic_data_boundaries_us_cd118.fetch/#get_repo_rootlevels_up-int-3-pathlibpath","title":"<code>get_repo_root(levels_up: int = 3) -&gt; pathlib.Path</code>","text":"<p>Return the root directory of this repo by walking up a fixed number of parent folders.</p> <p>Defaults to 3 levels up, assuming this file is under:     src/civic_data_boundaries_us/utils/</p>"},{"location":"api/civic_data_boundaries_us_cd118.fetch/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>Main entrypoint for fetching all layers defined in YAML configs.</p> <p>Returns:     0 if successful, 1 otherwise.</p>"},{"location":"api/civic_data_boundaries_us_cd118.fetch/#process_layerlayer-dict-none","title":"<code>process_layer(layer: dict) -&gt; None</code>","text":"<p>Process a single layer from YAML config: - create folders - download zip files - extract them</p>"},{"location":"api/civic_data_boundaries_us_cd118.index/","title":"Module <code>civic_data_boundaries_us_cd118.index</code>","text":""},{"location":"api/civic_data_boundaries_us_cd118.index/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us_cd118.index/#indexbuilderrorself-args-kwargs","title":"<code>IndexBuildError(self, /, *args, **kwargs)</code>","text":"<p>Raised if building the index fails.</p>"},{"location":"api/civic_data_boundaries_us_cd118.index/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us_cd118.index/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us_cd118.index/#build_index_main-int","title":"<code>build_index_main() -&gt; int</code>","text":"<p>Build an index.json summarizing exported GeoJSONs.</p> <p>Returns:     0 if successful, 1 on failure.</p>"},{"location":"api/civic_data_boundaries_us_cd118.index/#compute_bboxgeojson_path-pathlibpath-listfloat-none","title":"<code>compute_bbox(geojson_path: pathlib.Path) -&gt; list[float] | None</code>","text":"<p>Compute bounding box [minx, miny, maxx, maxy] for a GeoJSON file.</p> <p>Returns:     List of four floats, or None if read fails.</p>"},{"location":"api/civic_data_boundaries_us_cd118.index/#compute_feature_countgeojson_path-pathlibpath-int-none","title":"<code>compute_feature_count(geojson_path: pathlib.Path) -&gt; int | None</code>","text":"<p>Count number of features in a GeoJSON file.</p> <p>Returns:     Integer feature count, or None if read fails.</p>"},{"location":"api/civic_data_boundaries_us_cd118.index/#get_data_out_dir-pathlibpath","title":"<code>get_data_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-out directory for processed GeoJSON and chunked outputs.</p>"},{"location":"api/civic_data_boundaries_us_cd118.index/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>CLI entry point for index.</p>"},{"location":"api/civic_data_boundaries_us_cd118.index/#write_manifestout_dir-pathlibpath-layer_config-dict-index_data-listdict-manifest_filename-str-manifestjson-days_back-int-none-none-none","title":"<code>write_manifest(out_dir: pathlib.Path, layer_config: dict, index_data: list[dict], manifest_filename: str = 'manifest.json', days_back: int | None = None) -&gt; None</code>","text":"<p>Writes a manifest JSON file summarizing a data export.</p> <p>Args:     out_dir (Path): Root data output folder.     layer_config (dict): Config dictionary for the layer.     index_data (list[dict]): The index entries with paths and metadata.     manifest_filename (str): Filename for the manifest (default \"manifest.json\").     days_back (int | None): Optional number of days back for a date range.</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.config_utils/","title":"Module <code>civic_data_boundaries_us_cd118.utils.config_utils</code>","text":""},{"location":"api/civic_data_boundaries_us_cd118.utils.config_utils/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us_cd118.utils.config_utils/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.config_utils/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us_cd118.utils.config_utils/#load_layer_configlayer_name-str-dict","title":"<code>load_layer_config(layer_name: str) -&gt; dict</code>","text":"<p>Load configuration for a given layer, merged with global defaults.</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/","title":"Module <code>civic_data_boundaries_us_cd118.utils.get_paths</code>","text":""},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#classes","title":"Classes","text":""},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#functions","title":"Functions","text":""},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#get_cd118_in_dir-pathlibpath","title":"<code>get_cd118_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the folder under data-in/ where raw CD118 shapefiles are extracted.</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#get_cd118_out_dir-pathlibpath","title":"<code>get_cd118_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/national/ where CD118 geojsons are stored.</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#get_data_in_dir-pathlibpath","title":"<code>get_data_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in directory for raw input data (downloads, archives).</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#get_data_out_dir-pathlibpath","title":"<code>get_data_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-out directory for processed GeoJSON and chunked outputs.</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#get_national_out_dir-pathlibpath","title":"<code>get_national_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/ where national-level files are written. Includes layers like national states, counties, or CD118 merged geojsons.</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#get_repo_rootlevels_up-int-3-pathlibpath","title":"<code>get_repo_root(levels_up: int = 3) -&gt; pathlib.Path</code>","text":"<p>Return the root directory of this repo by walking up a fixed number of parent folders.</p> <p>Defaults to 3 levels up, assuming this file is under:     src/civic_data_boundaries_us/utils/</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#get_states_out_dir-pathlibpath","title":"<code>get_states_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the directory under data-out/ where per-state folders are written.</p>"},{"location":"api/civic_data_boundaries_us_cd118.utils.get_paths/#get_tiger_in_dir-pathlibpath","title":"<code>get_tiger_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the folder under data-in/ where TIGER shapefiles are stored after download and extraction.</p>"}]}